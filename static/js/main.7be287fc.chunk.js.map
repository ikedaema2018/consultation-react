{"version":3,"sources":["components/RegisterForm.js","components/App.js","serviceWorker.js","index.js"],"names":["RegisterInput","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","name","message","checkValue","bind","assertThisInitialized","event","type","target","val","value","_this$state","status","length","push","console","log","setState","react_default","a","createElement","RegisterForm_NameInput","assign","Component","NameInput","className","onChange","App","RegisterForm","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mMAIMA,qBAEJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAClBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACZC,KAAM,CAACC,KAAM,IACXC,QAAS,CAACD,KAAM,CAAC,kEAErBT,EAAKW,WAAaX,EAAKW,WAAWC,KAAhBX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KAPCA,0EAWRc,GACV,IAAIC,EAAOD,EAAME,OAAOP,KACpBQ,EAAMH,EAAME,OAAOE,MAFNC,EAIahB,KAAKI,MAA9BC,EAJYW,EAIZX,KAAME,EAJMS,EAINT,QAASU,EAJHD,EAIGC,OAEpB,OAAQL,GACP,IAAK,OACJP,EAAKC,KAAOQ,EACZP,EAAQD,KAAO,GAEZQ,EAAII,OAAS,IACfX,EAAQD,KAAKa,KAAK,sGAED,IAAfL,EAAII,QACNX,EAAQD,KAAKa,KAAK,gEAEnBC,QAAQC,IAAId,EAAQD,MAKtBN,KAAKsB,SAAS,CAACjB,KAAMA,EAAME,QAASA,EAASU,OAAQA,qCAKrD,IAAIX,EAAO,CAACD,KAAML,KAAKI,MAAMC,KAAKC,KAAMC,QAASP,KAAKI,MAAMG,QAAQD,KAAME,WAAYR,KAAKQ,YAC5F,OACCe,EAAAC,EAAAC,cAAA,UACCF,EAAAC,EAAAC,cAACC,EAAD5B,OAAA6B,OAAA,CAAWnB,WAAYR,KAAKQ,YAAgBF,YA3CpBsB,cAiDtBC,mLAIH,OAFAT,QAAQC,IAAIrB,KAAKJ,MAAMW,SACvBa,QAAQC,IAAIrB,KAAKJ,MAAMS,MAEtBkB,EAAAC,EAAAC,cAAA,UACCF,EAAAC,EAAAC,cAAA,6BACCzB,KAAKJ,MAAMW,UAAY,GAAKgB,EAAAC,EAAAC,cAAA,KAAGK,UAAW,iBAAkB9B,KAAKJ,MAAMW,SAAegB,EAAAC,EAAAC,cAAA,UACvFF,EAAAC,EAAAC,cAAA,SAAOb,KAAM,OAAQN,KAAM,OAAQyB,SAAU/B,KAAKJ,MAAMY,WAAYO,MAAOf,KAAKJ,MAAMU,eARnEsB,aAkBTjC,ICxDAqC,cAXb,SAAAA,EAAYpC,GAAO,OAAAE,OAAAC,EAAA,EAAAD,CAAAE,KAAAgC,GAAAlC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAkC,GAAA7B,KAAAH,KACXJ,0EAIN,OACE2B,EAAAC,EAAAC,cAACQ,EAAD,aAPYL,aCSEM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACRjB,EAAAC,EAAAC,cAACgB,EAAD,MACAC,SAASC,eAAe,SD0HnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7be287fc.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport '../css/register-form.css'\r\n\r\nclass RegisterInput extends Component {\r\n\r\n  constructor(props) {\r\n  \tsuper(props)\r\n\r\n\t  this.state = {\r\n  \t\tdata: {name: ''},\r\n      message: {name: [\"名前の入力は必須です\"]},\r\n\t  }\r\n\t\tthis.checkValue = this.checkValue.bind(this)\r\n  }\r\n\r\n\r\n  checkValue(event) {\r\n  \tlet type = event.target.name\r\n\t  let val = event.target.value\r\n\r\n\t  var {data, message, status} = this.state\r\n\r\n\t  switch (type) {\r\n\t\t  case \"name\":\r\n\t\t  \tdata.name = val\r\n\t\t\t  message.name = []\r\n\r\n\t\t\t  if(val.length > 10) {\r\n\t\t\t\t  message.name.push(\"名前は10文字以内で入力してください\")\r\n\t\t\t  }\r\n\t\t\t  if(val.length === 0) {\r\n\t\t\t\t  message.name.push(\"名前の入力は必須です\")\r\n\t\t\t  }\r\n\t\t\t  console.log(message.name)\r\n\t\t\t  break\r\n\t\t  default:\r\n\t\t\t  break\r\n\t  }\r\n\t  this.setState({data: data, message: message, status: status})\r\n  }\r\n\r\n\r\n\trender() {\r\n  \tlet name = {data: this.state.data.name, message: this.state.message.name, checkValue: this.checkValue}\r\n\t\treturn(\r\n\t\t\t<ul>\r\n\t\t\t\t<NameInput checkValue={this.checkValue} {...name}/>\r\n\t\t\t</ul>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nclass NameInput extends Component {\r\n\t\trender(){\r\n\t\t\tconsole.log(this.props.message)\r\n\t\t\tconsole.log(this.props.data)\r\n\t\t\treturn (\r\n\t\t\t\t<li>\r\n\t\t\t\t\t<label>名前</label>\r\n\t\t\t\t\t{this.props.message !== [] ? <p className={\"error-message\"}>{this.props.message}</p> : <p></p>}\r\n\t\t\t\t\t<input type={\"text\"} name={\"name\"} onChange={this.props.checkValue} value={this.props.name}></input>\r\n\t\t\t\t</li>\r\n\t\t\t)\r\n\t\t}\r\n}\r\nNameInput.propTypes= {\r\n\tcheckValue: PropTypes.func,\r\n\tname: PropTypes.string\r\n}\r\n\r\nexport default RegisterInput;","import React, { Component } from 'react';\nimport RegisterInput from './RegisterForm.js'\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n  }\n\n  render() {\n    return (\n      <RegisterInput />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n\t<App />,\r\n\tdocument.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}